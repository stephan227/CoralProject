{"version":3,"sources":["choropleth-chart.js"],"names":["svg","d3","select","width","attr","height","path","geoPath","projection","geoMercator","scale","center","translate","data","map","colorScale","scaleThreshold","domain","range","schemeBlues","queue","defer","json","csv","d","set","code","pop","await","ready","error","topo","append","selectAll","features","enter","total","get","id"],"mappings":"AACA;AACA,IAAIA,GAAG,GAAGC,EAAE,CAACC,MAAH,CAAU,KAAV,CAAV;AAAA,IACEC,KAAK,GAAG,CAACH,GAAG,CAACI,IAAJ,CAAS,OAAT,CADX;AAAA,IAEEC,MAAM,GAAG,CAACL,GAAG,CAACI,IAAJ,CAAS,QAAT,CAFZ,EAIA;;AACA,IAAIE,IAAI,GAAGL,EAAE,CAACM,OAAH,EAAX;AACA,IAAIC,UAAU,GAAGP,EAAE,CAACQ,WAAH,GACdC,KADc,CACR,EADQ,EAEdC,MAFc,CAEP,CAAC,CAAD,EAAG,EAAH,CAFO,EAGdC,SAHc,CAGJ,CAACT,KAAK,GAAG,CAAT,EAAYE,MAAM,GAAG,CAArB,CAHI,CAAjB,EAKA;;AACA,IAAIQ,IAAI,GAAGZ,EAAE,CAACa,GAAH,EAAX;AACA,IAAIC,UAAU,GAAGd,EAAE,CAACe,cAAH,GACdC,MADc,CACP,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4B,QAA5B,EAAsC,SAAtC,EAAiD,SAAjD,CADO,EAEdC,KAFc,CAERjB,EAAE,CAACkB,WAAH,CAAe,CAAf,CAFQ,CAAjB,EAIA;;AACAlB,EAAE,CAACmB,KAAH,GACGC,KADH,CACSpB,EAAE,CAACqB,IADZ,EACkB,qFADlB,EAEGD,KAFH,CAESpB,EAAE,CAACsB,GAFZ,EAEiB,4FAFjB,EAE+G,UAASC,CAAT,EAAY;AAAEX,EAAAA,IAAI,CAACY,GAAL,CAASD,CAAC,CAACE,IAAX,EAAiB,CAACF,CAAC,CAACG,GAApB;AAA2B,CAFxJ,EAGGC,KAHH,CAGSC,KAHT;;AAKA,SAASA,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4B;AAE1B;AACA/B,EAAAA,GAAG,CAACgC,MAAJ,CAAW,GAAX,EACGC,SADH,CACa,MADb,EAEGpB,IAFH,CAEQkB,IAAI,CAACG,QAFb,EAGGC,KAHH,GAIGH,MAJH,CAIU,MAJV,EAKI;AALJ,GAMK5B,IANL,CAMU,GANV,EAMeH,EAAE,CAACM,OAAH,GACRC,UADQ,CACGA,UADH,CANf,EASI;AATJ,GAUKJ,IAVL,CAUU,MAVV,EAUkB,UAAUoB,CAAV,EAAa;AACzBA,IAAAA,CAAC,CAACY,KAAF,GAAUvB,IAAI,CAACwB,GAAL,CAASb,CAAC,CAACc,EAAX,KAAkB,CAA5B;AACA,WAAOvB,UAAU,CAACS,CAAC,CAACY,KAAH,CAAjB;AACD,GAbL;AAcG,EAEL;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","file":"choropleth-chart.0dd105e5.js","sourceRoot":"../src","sourcesContent":["\r\n// The svg\r\nvar svg = d3.select(\"svg\"),\r\n  width = +svg.attr(\"width\"),\r\n  height = +svg.attr(\"height\");\r\n\r\n// Map and projection\r\nvar path = d3.geoPath();\r\nvar projection = d3.geoMercator()\r\n  .scale(70)\r\n  .center([0,20])\r\n  .translate([width / 2, height / 2]);\r\n\r\n// Data and color scale\r\nvar data = d3.map();\r\nvar colorScale = d3.scaleThreshold()\r\n  .domain([100000, 1000000, 10000000, 30000000, 100000000, 500000000])\r\n  .range(d3.schemeBlues[7]);\r\n\r\n// Load external data and boot\r\nd3.queue()\r\n  .defer(d3.json, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\")\r\n  .defer(d3.csv, \"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world_population.csv\", function(d) { data.set(d.code, +d.pop); })\r\n  .await(ready);\r\n\r\nfunction ready(error, topo) {\r\n\r\n  // Draw the map\r\n  svg.append(\"g\")\r\n    .selectAll(\"path\")\r\n    .data(topo.features)\r\n    .enter()\r\n    .append(\"path\")\r\n      // draw each country\r\n      .attr(\"d\", d3.geoPath()\r\n        .projection(projection)\r\n      )\r\n      // set the color of each country\r\n      .attr(\"fill\", function (d) {\r\n        d.total = data.get(d.id) || 0;\r\n        return colorScale(d.total);\r\n      });\r\n    }\r\n\r\n// // import * as d3 from 'd3'\r\n// // import * as topojson from 'topojson'\r\n// // import legend from 'd3-svg-legend'\r\n// // import { scaleBand } from 'd3-scale'\r\n\r\n// let margin = { top: 10, left: 10, right: 10, bottom: 10 }\r\n\r\n// let height = 500 - margin.top - margin.bottom\r\n\r\n// let width = 900 - margin.left - margin.right\r\n\r\n// let svg = d3\r\n//   .select('#choropleth-chart')\r\n//   .append('svg')\r\n//   .attr('height', height + margin.top + margin.bottom)\r\n//   .attr('width', width + margin.left + margin.right)\r\n//   .append('g')\r\n//   .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\r\n\r\n// // map and projection\r\n// var projection = d3\r\n//   .geoNaturalEarth1()\r\n//   .scale(width / 2 / Math.PI)\r\n//   .translate([width / 2, height / 2])\r\n// var path = d3.geoPath().projection(projection)\r\n\r\n// // create a variable to store data from the csv\r\n// var data = d3.map()\r\n\r\n// // console.log(d3.schemeRdPu)\r\n// // create color scale for the choropleth\r\n// var colorScale = d3\r\n//   .scaleThreshold()\r\n//   .domain(d3.range(0, 160))\r\n//   .range(d3.schemeRdPu[8])\r\n//    // .unknown('#ffffff')\r\n\r\n\r\n// // Legend\r\n// // var g = svg\r\n// //   .append('g')\r\n// //   .attr('class', 'legendThreshold')\r\n// //   .attr('transform', 'translate(20,20)')\r\n// // g.append('text')\r\n// //   .attr('class', 'caption')\r\n// //   .attr('x', 0)\r\n// //   .attr('y', -6)\r\n// //   .text('Rate')\r\n// // var labels = ['0', '1-5', '6-10', '11-25', '26-100', '101-1000', '> 1000']\r\n\r\n// // var legend = d3\r\n// //   .legendColor()\r\n// //   .labels(function(d) {\r\n// //     return labels[d.i]\r\n// //   })\r\n// //   .shapePadding(4)\r\n// //   .scale(colorScale)\r\n// // svg.select('.legendThreshold').call(legend)\r\n\r\n// // NEW LEGEND\r\n// // var quantize = d3\r\n// //   .scaleQuantize()\r\n// //   .domain([0, 0.15])\r\n// //   .range(\r\n// //     d3.range(9).map(function(i) {\r\n// //       return 'q' + i + '-9'\r\n// //     })\r\n// //   )\r\n\r\n// // svg\r\n// //   .append('g')\r\n// //   .attr('class', 'legendQuant')\r\n// //   .attr('transform', 'translate(20,20)')\r\n\r\n// // var legend = d3\r\n// //   .legendColor()\r\n// //   .labelFormat(d3.format('.2f'))\r\n// //   .useClass(true)\r\n// //   .title('A really long title')\r\n// //   .titleWidth(100)\r\n// //   .scale(quantize)\r\n\r\n// // svg.select('.legendQuant').call(legend)\r\n\r\n// // read in the data\r\n\r\n// var promises = [\r\n//   d3.json('https://enjalot.github.io/wwsd/data/world/world-110m.geojson'),\r\n//   d3.csv('./data/dataformap.csv', function(d) {\r\n//     data.set(d.id, +d.YR2018)\r\n//   })\r\n// ]\r\n\r\n// Promise.all(promises).then(ready)\r\n\r\n// function ready([json]) {\r\n//   // console.log(json)\r\n//   // console.log(json.features)\r\n\r\n//   svg\r\n//     .append('g')\r\n//     .attr('class', 'countries')\r\n//     .selectAll('path')\r\n//     .data(json.features)\r\n//     .enter()\r\n//     .append('path')\r\n//     .attr('fill', function(d) {\r\n//       if (d) {\r\n//         return colorScale(d.YR2018 )\r\n//       } else {\r\n//         return '#ccc'\r\n//       }\r\n//     })\r\n    \r\n//     .attr('d', path)\r\n//     .attr('stroke', '#888888')\r\n//     .attr('stroke-width', 0.5)\r\n// }"]}